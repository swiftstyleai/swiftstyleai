'use server';

import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

import { createClient } from '@/lib/supabase/server';

import formSchema from './form-schema';

export async function login(formData: FormData) {
  const validatedFields = formSchema.safeParse({
    email: formData.get('email'),
    password: formData.get('password'),
  });

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: {
        type: 'validation',
        messages: validatedFields.error.flatten().fieldErrors,
      },
    };
  }

  const supabase = createClient();

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  };

  const { error } = await supabase.auth.signInWithPassword(data);

  if (error) {
    return {
      errors: {
        type: 'authentication',
        messages: [error.message],
      },
    };
  }

  revalidatePath('/', 'layout');
  redirect('/');
}
